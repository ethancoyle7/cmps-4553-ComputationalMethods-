      Brand  Price  Year NumCarrots
3      Audi  35000  2018        NaN
2      Ford  12000  2018        NaN
0   Hyundai  22000  2015        NaN
4  Mercedes  90000  2003        NaN
1    Toyots  25000  2013        NaN
      Brand  Price  Year NumCarrots
2      Ford  12000  2018        NaN
0   Hyundai  22000  2015        NaN
1    Toyots  25000  2013        NaN
3      Audi  35000  2018        NaN
4  Mercedes  90000  2003        NaN
 Now we gonna cut into bins the result list and label them  on their price point 

 Here is our orignal list
       Brand  Price  Year NumCarrots
2      Ford  12000  2018        NaN
0   Hyundai  22000  2015        NaN
1    Toyots  25000  2013        NaN
3      Audi  35000  2018        NaN
4  Mercedes  90000  2003        NaN 


 And here is out cut and bin of the price point


2           Medium
0          Average
1          Average
3          Average
4    too Expensive
Name: Price, dtype: category
Categories (4, object): ['Low' < 'Medium' < 'Average' < 'too Expensive']
2      fancy
0       junk
1       junk
3      fancy
4    clunker
Name: Year, dtype: category
Categories (4, object): ['clunker', 'semiclunker', 'junk', 'fancy'] 


1    c
2    b
3    a
4    d
dtype: object

 Our Data Fram before filling in the nan value is : 
      A    B   C  D
0  NaN  2.0 NaN  0
1  3.0  4.0 NaN  1
2  NaN  NaN NaN  5
3  NaN  3.0 NaN  4 
And after the fill 


     A    B    C  D
0  1.0  2.0  1.0  0
1  3.0  4.0  1.0  1
2  1.0  1.0  1.0  5
3  1.0  3.0  1.0  4

 Now We gonna show merging


First Data Fram is 
    id   Name subject_id
0   1  Billy       sub2
1   2  Brian       sub4
2   3   Bran       sub3
3   4  Bryce       sub6
4   5  Betty       sub5

Second Data Fram is : 
    id    Name subject_id
0   1    Alex       sub1
1   2     Amy       sub2
2   3   Allen       sub4
3   4   Alice       sub6
4   5  Ayoung       sub5

 Now merged on id 


   id  Name_x subject_id_x Name_y subject_id_y
0   1    Alex         sub1  Billy         sub2
1   2     Amy         sub2  Brian         sub4
2   3   Allen         sub4   Bran         sub3
3   4   Alice         sub6  Bryce         sub6
4   5  Ayoung         sub5  Betty         sub5
   id_x  Name_x subject_id  id_y Name_y
0     1    Alex       sub1   NaN    NaN
1     2     Amy       sub2   1.0  Billy
2     3   Allen       sub4   2.0  Brian
3     4   Alice       sub6   4.0  Bryce
4     5  Ayoung       sub5   5.0  Betty
How= right
    id_x  Name_x subject_id  id_y Name_y
0   2.0     Amy       sub2     1  Billy
1   3.0   Allen       sub4     2  Brian
2   NaN     NaN       sub3     3   Bran
3   4.0   Alice       sub6     4  Bryce
4   5.0  Ayoung       sub5     5  Betty
<module 'pandas' from '/opt/virtualenvs/python3/lib/python3.8/site-packages/pandas/__init__.py'>
           A         B         Tenant
0   1.182590 -0.760730               
1  -0.746266  0.353543          Bilbo
2  -0.781231  0.483903          Bilbo
3   0.440766  0.396612          Bilbo
4  -0.585954  0.042624  Sam the Brave
5   1.071844 -0.264782          Bilbo
6   0.981173 -0.202625          Bilbo
7   0.770119 -0.862059               
8   0.456042  1.539736               
9   0.850921  1.142951          Bilbo
10 -1.409810  3.022351          Bilbo
11 -0.105847 -0.719998  Sam the Brave
12  1.237463  0.228714  Sam the Brave
13 -0.312851  1.063068          Bilbo
14  0.767771 -0.956095          Bilbo
15 -0.964910 -0.286459          Frodo
16 -0.658998 -0.751022               
17  0.163514  0.625850  Sam the Brave
18  0.806066 -0.426265          Bilbo
19 -0.706297  0.578839          Frodo

 We replace all the empty cells with np.nan
 To be able to drop the row with empyth cells

           A         B         Tenant
0   1.182590 -0.760730            NaN
1  -0.746266  0.353543          Bilbo
2  -0.781231  0.483903          Bilbo
3   0.440766  0.396612          Bilbo
4  -0.585954  0.042624  Sam the Brave
5   1.071844 -0.264782          Bilbo
6   0.981173 -0.202625          Bilbo
7   0.770119 -0.862059            NaN
8   0.456042  1.539736            NaN
9   0.850921  1.142951          Bilbo
10 -1.409810  3.022351          Bilbo
11 -0.105847 -0.719998  Sam the Brave
12  1.237463  0.228714  Sam the Brave
13 -0.312851  1.063068          Bilbo
14  0.767771 -0.956095          Bilbo
15 -0.964910 -0.286459          Frodo
16 -0.658998 -0.751022            NaN
17  0.163514  0.625850  Sam the Brave
18  0.806066 -0.426265          Bilbo
19 -0.706297  0.578839          Frodo

 With the dropped collumns :
            A         B         Tenant
1  -0.746266  0.353543          Bilbo
2  -0.781231  0.483903          Bilbo
3   0.440766  0.396612          Bilbo
4  -0.585954  0.042624  Sam the Brave
5   1.071844 -0.264782          Bilbo
6   0.981173 -0.202625          Bilbo
9   0.850921  1.142951          Bilbo
10 -1.409810  3.022351          Bilbo
11 -0.105847 -0.719998  Sam the Brave
12  1.237463  0.228714  Sam the Brave
13 -0.312851  1.063068          Bilbo
14  0.767771 -0.956095          Bilbo
15 -0.964910 -0.286459          Frodo
17  0.163514  0.625850  Sam the Brave
18  0.806066 -0.426265          Bilbo
19 -0.706297  0.578839          Frodo

 Now we gonna demonstrate summing up rows and
putting them in new collum

main.py:102: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.
  df['Sum of Rows'] = df.sum(axis=1)

 With New Collum E to hold the sum of each row
    Col A  Col B Col C  Col D  Sum of Rows
0      1      2    dd      5            8
1      2      3    ee      9           14
2      3      4    ff      1            8

 We are now going to set the index display

DataFrame with default index
    rollno      name  physics  botony
0      21     Bilbo       72      67
1      23    Chinky       78      69
2      32    chunky       74      56
3      52  potatoes       54      76

DataFrame with column as index
             name  physics  botony
rollno                           
21         Bilbo       72      67
23        Chinky       78      69
32        chunky       74      56
52      potatoes       54      76

 Here we gonna sort on the physics number :
             name  physics  botony
rollno                           
52      potatoes       54      76
21         Bilbo       72      67
32        chunky       74      56
23        Chinky       78      69

 Now we sorting on the roll number
             name  physics  botony
rollno                           
21         Bilbo       72      67
23        Chinky       78      69
32        chunky       74      56
52      potatoes       54      76
main.py:130: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.
  df['Sum of Rows'] = df.sum(axis=1)

 With New Collum E to hold the sum of each row
             name  physics  botony  Sum of Rows
rollno                                        
21         Bilbo       72      67          139
23        Chinky       78      69          147
32        chunky       74      56          130
52      potatoes       54      76          130

 No we gonna set the index name:


our old index name is : None 

Initial DataFrame:
            Applicant  Hometown  Score
cheese          Ratan     Delhi     85
potatoes         Anil      Pune     87
cherrybutt     Mukesh  Dhangadi     90
penguinsuit     Kamal   Kolkata     89 

DataFrame after setting the name of Index Column:
            Applicant  Hometown  Score
Date                                  
cheese          Ratan     Delhi     85
potatoes         Anil      Pune     87
cherrybutt     Mukesh  Dhangadi     90
penguinsuit     Kamal   Kolkata     89 

 our new index name is : Date
With the sorted
             Applicant  Hometown  Score
Date                                  
cheese          Ratan     Delhi     85
potatoes         Anil      Pune     87
penguinsuit     Kamal   Kolkata     89
cherrybutt     Mukesh  Dhangadi     90
